////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работы с файлами хранилища данных".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПРОГРАММНЫЙ_ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция РезультатПолученияДанных(Ссылка, Знач ПолноеИмяФайлаИлиКаталога, ПолноеИмяФайла = "", Отказ = Ложь, Версия = Неопределено, Архив = Ложь) Экспорт
	
	ПолучитьДанныеФайла(Ссылка, ПолноеИмяФайлаИлиКаталога, ПолноеИмяФайла, Отказ, Версия, Архив); Возврат НЕ Отказ;
	
КонецФункции // РезультатПолученияДанных()

//▼ РИ-011332 | 30.04.20-16:07 | Юдин К.С. // ☯ ДОРАБОТКА - http://itil.st.ru/itil_task_report/Itil_ReportOnTask.html?ref=95b21304-82e4-11ea-80d1-984be16db04b
Функция РезультатПомещенияДанных(Ссылка, Знач ПолноеИмяФайла, Знач ИмяФайла, Отказ = Ложь, Версия = Неопределено, Архив = Ложь) Экспорт
	
	Рез=ПоместитьДанныеФайла(Ссылка, ПолноеИмяФайла, ИмяФайла, Отказ, Версия, Архив);
	//--<Хорошев Андрей 13.07.2016 9:24:27 
	ИмяТаблицы = МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
		.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(Ссылка);
		
	Если не Отказ и МодульРаботыСФайламиХранилищаДанныхПовтИсп.ХранимТаблицуНаMySQL(ИмяТаблицы) Тогда
		ТекОб=Ссылка.ПолучитьОбъект();
		ТекОб["Ссылка"+ИмяТаблицы]=Рез;
		ТекОб.Записать();
	КонецЕсли; 
	//-->Хорошев Андрей 13.07.2016 9:24:27  
	Возврат НЕ Отказ;
	
КонецФункции // РезультатПомещенияДанных()

// Ссылка - ВнешнийИсточникДанныхТаблицаСсылка.ФайловоеХранилище
Функция РезультатПолученияДвоичныхДанных(Ссылка, Данные, ИмяФайла = "", Отказ = Ложь, Версия = Неопределено, Архив = Ложь) Экспорт
	
	ПолучитьДвоичныеДанные(Ссылка, Данные, ИмяФайла, Отказ, Версия, Архив); Возврат НЕ Отказ;
	
КонецФункции // РезультатПолученияДвоичныхДанных()

Функция РезультатПомещенияДвоичныхДанных(Ссылка, Данные, Знач ИмяФайла, Отказ = Ложь, Версия = Неопределено, Архив = Ложь) Экспорт
	
	ПоместитьДвоичныеДанные(Ссылка, Данные, ИмяФайла, Отказ, Версия, Архив); Возврат НЕ Отказ;
	
КонецФункции // РезультатПомещенияДвоичныхДанных()

#Если НЕ ВебКлиент Тогда

Функция ВернутьМассивИменВременныхФайлов(МассивСсылокНаФайлы) Экспорт
	
	Если МассивСсылокНаФайлы.Количество() Тогда 	
		ИмяКаталога = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
		СоздатьКаталог(ИмяКаталога);
		ПолноеИмяФайла = "";
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	
	Для Каждого Элемент Из МассивСсылокНаФайлы Цикл 
		ПолноеИмяФайла = "";
		Если РезультатПолученияДанных(Элемент, ИмяКаталога, ПолноеИмяФайла) Тогда 
			МассивИменФайлов.Добавить(ПолноеИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИменФайлов;  

КонецФункции // ВернутьМассивИменФайлов()

Процедура УдалитьВременныеФайлы(МассивИменФайлов) Экспорт
	
	МассивИменКаталогов = Новый Массив;
	
	Для Каждого Элемент Из МассивИменФайлов Цикл 
		МассивФайлов = НайтиФайлы(Элемент);
		Для индекс = 1 По МассивФайлов.Количество() Цикл 
			Если МассивИменКаталогов.Найти(МассивФайлов[индекс - 1].Путь) = Неопределено Тогда 
				МассивИменКаталогов.Добавить(МассивФайлов[индекс - 1].Путь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Элемент Из МассивИменКаталогов Цикл 
		Если Найти(Элемент, МодульРаботыСФайламиХранилищаДанныхПовтИсп.ПолучитьКаталогДополнительнойИнформации()) Тогда 
			Продолжить;
		КонецЕсли;
		Если Найти(НРег(Элемент), "temp") Тогда
			УдалитьФайлы(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьВременныеФайлы()

Функция ВернутьИмяВременногоФайла(СсылкаНаФайл) Экспорт
	
	МассивСсылокаНаФайлы = Новый Массив;
	МассивСсылокаНаФайлы.Добавить(СсылкаНаФайл);
	
	МассивИменФайлов = ВернутьМассивИменВременныхФайлов(МассивСсылокаНаФайлы);
	
	ИмяВременногоФайла = "";
	
	Если МассивИменФайлов.Количество() Тогда 
		ИмяВременногоФайла = МассивИменФайлов[0];
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции // ВернутьИмяВременногоФайла()

Процедура УдалитьВременныйФайл(ПолноеИмяФайла) Экспорт
	
	МассивИменФайлов = Новый Массив();
	МассивИменФайлов.Добавить(ПолноеИмяФайла);
	
	УдалитьВременныеФайлы(МассивИменФайлов);
	
КонецПроцедуры // УдалитьВременныйФайл()
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОПОЛНИТЕЛЬНОГО НАЗНАЧЕНИЯ

Функция ВернутьМассивИменВременныхФайловНоменклатуры(Номенклатура, Основной = Ложь, ОсновнойРодителя = Истина) Экспорт
	
	МассивКартинок = Новый Массив;
	
	Если Основной Тогда 
		ОсновнойФайлИзображения = Номенклатура.ОсновнойФайлИзображения;
		Если ЗначениеЗаполнено(ОсновнойФайлИзображения) Тогда 
			МассивКартинок.Добавить(ОсновнойФайлИзображения);
		ИначеЕсли ОсновнойРодителя Тогда 
			Родитель = Номенклатура.Родитель;
			Если ЗначениеЗаполнено(Родитель) Тогда 
				ОсновнойФайлИзображения = Родитель.ОсновнойФайлИзображения;
				Если ЗначениеЗаполнено(ОсновнойФайлИзображения) Тогда
					МассивКартинок.Добавить(Номенклатура.Родитель.ОсновнойФайлИзображения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		МассивКартинокОсн = МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
			.ВернутьМассивСсылокНаФайлы(ПредопределенноеЗначение("Перечисление.ТипыФайловХранилищаДанных.Prices"), Номенклатура);
		Для Каждого Элемент Из МассивКартинокОсн Цикл 
			МассивКартинок.Добавить(Элемент);
		КонецЦикла;
		Если НЕ МассивКартинокОсн.Количество() Тогда 
			МассивКартинокДоп = МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
				.ВернутьМассивСсылокНаФайлы(ПредопределенноеЗначение("Перечисление.ТипыФайловХранилищаДанных.Prices"), Номенклатура.Родитель);
			Для Каждого Элемент Из МассивКартинокДоп Цикл 
				МассивКартинок.Добавить(Элемент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
			
	Возврат ВернутьМассивИменВременныхФайлов(МассивКартинок);  

КонецФункции // ВернутьМассивИменВременныхФайловНоменклатуры()

Функция ВернутьМассивИменВременныхФайловКонтрагента(Контрагент, Основной = Ложь) Экспорт
	
	МассивКартинок = Новый Массив;
	
	Если Основной Тогда 
		////Если ЗначениеЗаполнено(Контрагент.ОсновнойФайлИзображения) Тогда 
		////	МассивКартинок.Добавить(Контрагент.ОсновнойФайлИзображения);
		////КонецЕсли;
	Иначе
		МассивКартинок = МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
			.ВернутьМассивСсылокНаФайлы(ПредопределенноеЗначение("Перечисление.ТипыФайловХранилищаДанных.Partners"), Контрагент);
	КонецЕсли;
			
	Возврат ВернутьМассивИменВременныхФайлов(МассивКартинок);  

КонецФункции // ВернутьМассивИменВременныхФайловКонтрагента()

#КонецЕсли

#КонецОбласти

#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПолучитьДанныеФайла(Ссылка, Знач ПолноеИмяФайлаИлиКаталога, ПолноеИмяФайла, Отказ, Версия = Неопределено, Архив = Ложь)
	
	Перем Данные, ИмяФайла;
	
	ПолучитьДвоичныеДанные(Ссылка, Данные, ИмяФайла, Отказ, Версия, Архив);
	
	Файл = Новый Файл(ПолноеИмяФайлаИлиКаталога);
	Если Файл.Существует() И Файл.ЭтоКаталог() Тогда 
		ИмяФайла = Ссылка.ИмяФайла; ПолноеИмяФайла = ПолноеИмяФайлаИлиКаталога + ?(ЗначениеЗаполнено(ИмяФайла), ИмяФайла, "temp.tmp");
	Иначе
		ПолноеИмяФайла = ПолноеИмяФайлаИлиКаталога;
	КонецЕсли;
	
	Если НЕ Отказ Тогда 
		Данные.Записать(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДанныеФайла()

// Функция - Поместить данные файла
//
// Параметры:
//  Ссылка			 - СправочникиСсылка.ФайлыХранилищаДанных; - 
//  ПолноеИмяФайла	 - 	 - 
//  ИмяФайла		 - 	 - 
//  Отказ			 - 	 - 
//  Версия			 - 	 - 
//  Архив			 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПоместитьДанныеФайла(Ссылка, Знач ПолноеИмяФайла, Знач ИмяФайла, Отказ, Версия = Неопределено, Архив = Ложь) Экспорт
	
	Возврат ПоместитьДвоичныеДанные(Ссылка, Новый ДвоичныеДанные(ПолноеИмяФайла), ИмяФайла, Отказ, Версия, Архив);
	
КонецФункции // ПоместитьДанныеФайла()

Процедура ПолучитьДвоичныеДанные(Ссылка, Данные, ИмяФайла, Отказ, Версия = Неопределено, Архив = Ложь)
	
	//--<Хорошев Андрей 09.09.2016 14:22:26 РИ-004825
	//Адрес создаем на стороне клиента, для того чтобы избежать утечек памяти на сервере
	Адрес=ПоместитьВоВременноеХранилище("");
	//-->Хорошев Андрей 09.09.2016 14:22:35 РИ-004825 
	
	Если Метаданные.ВнешниеИсточникиДанных.ФайловоеХранилище.Таблицы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(Ссылка))) Тогда
		//Прямая ссылка на внешнюю таблицу
		МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
			.ПолучитьПроизвольныеДанные(Адрес, Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Имя, Ссылка, Отказ, Версия);
	Иначе
		МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ПолучитьДанные(Ссылка, Адрес, Отказ, Версия);
	КонецЕсли; 
	
	Если НЕ Отказ И ЗначениеЗаполнено(Адрес) Тогда 
		СтруктураДанных = ПолучитьИзВременногоХранилища(Адрес);
		СтруктураДанных.Свойство("Данные", Данные);
		СтруктураДанных.Свойство("Версия", Версия);
		СтруктураДанных.Свойство("ИмяФайла", ИмяФайла);
		УдалитьИзВременногоХранилища(Адрес);
		
		Если Архив И Прав(ИмяФайла, 4) = ".zip" И СтрДлина(ИмяФайла) > 4 Тогда 
			
			Попытка
				
				ИмяКаталога = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
				СоздатьКаталог(ИмяКаталога);
				
				Данные.Записать(ИмяКаталога + ИмяФайла);
				
				ZIP = Новый ЧтениеZipФайла(ИмяКаталога + ИмяФайла);
				Если ZIP.Комментарий = "архивация для сжатия данных" Тогда 
					ИмяФайла = ZIP.Элементы[0].Имя;
					ZIP.Извлечь(ZIP.Элементы[0], ИмяКаталога);
					Данные = Новый ДвоичныеДанные(ИмяКаталога + ИмяФайла);
				КонецЕсли;
				ZIP.Закрыть();
				ZIP = Неопределено;
				
				МодульРаботыСФайламиХранилищаДанных.УдалитьВременныйФайл(ИмяКаталога + ИмяФайла);
				
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Неудачная попытка получения архивированных данных!" + Символы.ПС + ОписаниеОшибки(), Отказ, "Внешнее хранилище данных");
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
//▼ 17.04.2018-10:05 // Махлышев Андрей // ☯ ДОРАБОТКА #РО-028731
	Если НЕ ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Отказ = Истина;
	КонецЕсли;
//▲ 17.04.2018-10:05 // Махлышев Андрей // ☯ ДОРАБОТКА
	
КонецПроцедуры // ПолучитьДвоичныеДанные()

// Помещает (обновляет) двоичные данные в хранилище. Обновление данных будет производится если 
// в качестве первого параметра передана ВнешнийИсточникДанныхТаблицаСсылка.ФайловоеХранилище
//
// Параметры:
//  Ссылка	 - СправочникиСсылка.ФайлыХранилищаДанных, ВнешнийИсточникДанныхТаблицаСсылка.ФайловоеХранилище - 
//  Данные	 - 	 - 
//  ИмяФайла - 	 - 
//  Отказ	 - 	 - 
//  Версия	 - 	 - 
//  Архив	 - 	 - 
// 
// Возвращаемое значение:
//  ВнешнийИсточникДанныхТаблицаСсылка.ФайловоеХранилище - 
//
Функция ПоместитьДвоичныеДанные(Ссылка, Знач Данные, Знач ИмяФайла, Отказ, Версия = Неопределено, Архив = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Данные) ИЛИ НЕ ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда 
		ОбщегоНазначения.СообщитьОбОшибке("Неудачная попытка помещения некорректных данных!", Отказ, "Внешнее хранилище данных"); Возврат Неопределено;
	КонецЕсли;
	
	Если Архив Тогда
		
		Попытка
			
			ИмяКаталога = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
			СоздатьКаталог(ИмяКаталога);
			
			Данные.Записать(ИмяКаталога + ИмяФайла);
			
			ZIP = Новый ЗаписьZipФайла(ИмяКаталога + ИмяФайла + ".zip", , "архивация для сжатия данных", МетодСжатияZIP.BZIP2, УровеньСжатияZIP.Максимальный);
			ZIP.Добавить(ИмяКаталога + ИмяФайла);
			ZIP.Записать();
			ZIP = Неопределено;
			
			ИмяФайла = ИмяФайла + ".zip";
			Данные = Новый ДвоичныеДанные(ИмяКаталога + ИмяФайла);
			
			МодульРаботыСФайламиХранилищаДанных.УдалитьВременныйФайл(ИмяКаталога + ИмяФайла);
			
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Неудачная попытка помещения архивированных данных!" + Символы.ПС + ОписаниеОшибки(), Отказ, "Внешнее хранилище данных");
		КонецПопытки;
		
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(Новый Структура("Данные,Версия,ИмяФайла", Данные, Версия, ИмяФайла));
	
	Возврат МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ПоместитьДанные(Ссылка, Адрес, Отказ);
	
КонецФункции // ПоместитьДвоичныеДанные()

Функция ПоместитьПроизвольныеДвоичныеДанные(ИмяТаблицы, Знач Данные, Знач ИмяФайла, Отказ, Версия = Неопределено, Архив = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Данные) ИЛИ НЕ ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда 
		ОбщегоНазначения.СообщитьОбОшибке("Неудачная попытка помещения некорректных данных!", Отказ, "Внешнее хранилище данных"); Возврат Неопределено;
	КонецЕсли;
	
	Если Архив Тогда
		
		Попытка
			
			ИмяКаталога = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
			СоздатьКаталог(ИмяКаталога);
			
			Данные.Записать(ИмяКаталога + ИмяФайла);
			
			ZIP = Новый ЗаписьZipФайла(ИмяКаталога + ИмяФайла + ".zip", , "архивация для сжатия данных", МетодСжатияZIP.BZIP2, УровеньСжатияZIP.Максимальный);
			ZIP.Добавить(ИмяКаталога + ИмяФайла);
			ZIP.Записать();
			ZIP = Неопределено;
			
			ИмяФайла = ИмяФайла + ".zip";
			Данные = Новый ДвоичныеДанные(ИмяКаталога + ИмяФайла);
			
			МодульРаботыСФайламиХранилищаДанных.УдалитьВременныйФайл(ИмяКаталога + ИмяФайла);
			
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Неудачная попытка помещения архивированных данных!" + Символы.ПС + ОписаниеОшибки(), Отказ, "Внешнее хранилище данных");
		КонецПопытки;
		
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(Новый Структура("Данные,Версия,ИмяФайла", Данные, Версия, ИмяФайла));
	
	Возврат МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ПоместитьПроизвольныеДанные(Адрес, ИмяТаблицы, , Отказ);
	
КонецФункции

#КонецОбласти

// Вернет ссылку на запись во внешнем хранилище
Функция ПоместитьФайлВоВнешнееХранилище(ФайлХранилищаДанных, ПутьКФайлуИсточнику, ИмяФайла, Отказ, СжатьСохраняемыеДанные = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлуИсточнику);
	ИмяТаблицыХранилища = МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
		.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(ФайлХранилищаДанных);
	
	СсылкаЗаписиВоВнешнемХранилище = 
		ПоместитьДанныеВТаблицуВнешнегоХранилища(ИмяТаблицыХранилища, ДвоичныеДанныеФайла, ИмяФайла, Отказ, СжатьСохраняемыеДанные);
	
	Возврат СсылкаЗаписиВоВнешнемХранилище;
	
КонецФункции

// Вернет ссылку на запись во внешнем хранилище
Функция ПоместитьДвоичныеДанныеВоВнешнемХранилище(ИмяТаблицыХранения, ДвоичныеДанные, ИмяФайла, Отказ, СжатьСохраняемыеДанные = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаЗаписиВоВнешнемХранилище = 
		ПоместитьДанныеВТаблицуВнешнегоХранилища(ИмяТаблицыХранения, ДвоичныеДанные, ИмяФайла, Отказ, СжатьСохраняемыеДанные);
		
	Возврат СсылкаЗаписиВоВнешнемХранилище;
	
КонецФункции

// Вернет ссылку на запись во внешнем хранилище
Функция ОбновитьДанныеВоВнешемХранилище(СсылкаНаЗаписиВТаблицеХранилища, ДвоичныеДанные, ИмяФайла, Отказ, СжатьСохраняемыеДанные = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаЗаписиВоВнешнемХранилище = 
		ОбновитьДанныеЗаписиВТаблицеВнешнегоХранилища(СсылкаНаЗаписиВТаблицеХранилища, ДвоичныеДанные, ИмяФайла, Отказ, СжатьСохраняемыеДанные);
		
	Возврат СсылкаЗаписиВоВнешнемХранилище;
		
КонецФункции


Процедура ИзменитьЗначениеИнформационногоПоляЗаписиВнешнегоХранилища(СсылкаНаФайлВоВнешемХранилище, ИмяПоля, НовоеЗначениеПоля, Отказ) Экспорт
	
	Если СсылкаНаФайлВоВнешемХранилище.Пустая() Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Передана пустая ссылка на запись во внешнем хранилище.", Отказ, "Внешнее хранилище данных"); 
		Возврат;
		
	КонецЕсли;
	
	Если ИмяПоля = "ПометкаУдаления" Тогда 
		ИмяПоляВнешнегоХранилища = "Marked";
	ИначеЕсли ИмяПоля = "ИмяФайла" Тогда
		ИмяПоляВнешнегоХранилища = "Description";
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Недоступное поле для изменения данных!", Отказ, "Внешнее хранилище данных"); 
		Возврат;
	КонецЕсли;
	
	СсылкаНаЗаписьВТаблицеХранилища = СсылкаНаЗаписьВТаблицеХранилища(СсылкаНаФайлВоВнешемХранилище, Отказ);
	Если СсылкаНаЗаписьВТаблицеХранилища = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
		.ИзменитьЗначениеПоляЗаписиТаблицы(СсылкаНаЗаписьВТаблицеХранилища, ИмяПоляВнешнегоХранилища, НовоеЗначениеПоля, Отказ);
	
КонецПроцедуры

// Вернет ссылку на запись во внешнем хранилище
Функция ПоместитьДанныеВТаблицуВнешнегоХранилища(ИмяТаблицыХранилища, Знач ДвоичныеДанные, ИмяФайла, Отказ, СжатьСохраняемыеДанные)
	
	СтруктураДанных = ПодготовитьСтруктуруДанных(ДвоичныеДанные, ИмяФайла, Отказ, СжатьСохраняемыеДанные);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	СсылкаЗаписиВоВнешнемХранилище = МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
		.ПоместитьДанныеВТаблицу(ИмяТаблицыХранилища, СтруктураДанных, Отказ);
	
	Возврат СсылкаЗаписиВоВнешнемХранилище;
	
КонецФункции

// Вернет ссылку на запись во внешнем хранилище
Функция ОбновитьДанныеЗаписиВТаблицеВнешнегоХранилища(СсылкаНаЗаписиВТаблицеХранилища, Знач ДвоичныеДанные, ИмяФайла, Отказ, СжатьСохраняемыеДанные)
	
	СтруктураДанных = ПодготовитьСтруктуруДанных(ДвоичныеДанные, ИмяФайла, Отказ, СжатьСохраняемыеДанные);
	
	СсылкаЗаписиВоВнешнемХранилище = МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
		.ОбновитьДанныеЗаписиТаблицы(СсылкаНаЗаписиВТаблицеХранилища, СтруктураДанных, Отказ);
		
	Возврат СсылкаЗаписиВоВнешнемХранилище;

КонецФункции

Функция ПодготовитьСтруктуруДанных(ДвоичныеДанные, ИмяФайла, Отказ, СжатьСохраняемыеДанные)
	
	Если ДанныеНеКорректный(ДвоичныеДанные, Отказ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СкорректироватьДлинноеИмяФайла(ИмяФайла);
	
	Если СжатьСохраняемыеДанные Тогда
		
		СжатьДвоичныеДанные(ДвоичныеДанные, ИмяФайла);
		
	КонецЕсли;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	СтруктураДанных.Вставить("ПредставлениеДанных", ИмяФайла);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ДанныеНеКорректный(ДвоичныеДанные, Отказ)
	
	Если Не ЗначениеЗаполнено(ДвоичныеДанные) Или Не ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Сохраняемые данные не соответствуют типу!", Отказ, "Внешнее хранилище данных"); 
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура СкорректироватьДлинноеИмяФайла(ИмяФайла)
	
	Если СтрДлина(ИмяФайла) > 128 Тогда 
		ИмяФайла = "~"+Прав(ИмяФайла, 127);
	КонецЕсли;
	
КонецПроцедуры // СкорректироватьДлинноеИмяФайла()

Процедура СжатьДвоичныеДанные(ДвоичныеДанные, ИмяФайла)
	
	Попытка
		
		ИмяКаталога = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
		СоздатьКаталог(ИмяКаталога);
		
		ДвоичныеДанные.Записать(ИмяКаталога + ИмяФайла);
		
		ZIP = Новый ЗаписьZipФайла(ИмяКаталога + ИмяФайла + ".zip",, "архивация для сжатия данных", 
			МетодСжатияZIP.BZIP2, УровеньСжатияZIP.Максимальный);
			
		ZIP.Добавить(ИмяКаталога + ИмяФайла);
		ZIP.Записать();
		ZIP = Неопределено;
		
		ИмяФайла = ИмяФайла + ".zip";
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяКаталога + ИмяФайла);
		
		МодульРаботыСФайламиХранилищаДанных.УдалитьВременныйФайл(ИмяКаталога + ИмяФайла);
		
	Исключение
		
		ОбщегоНазначения.СообщитьОбОшибке("Неудалось сжать данные перед помещением во внешнее хранилище!" 
			+ Символы.ПС + ОписаниеОшибки(),, "Внешнее хранилище данных");
			
	КонецПопытки;
	
КонецПроцедуры


Функция ПолучитьПолноеИмяФайлаВыгруженногоИзХранилища(СсылкаНаФайлВоВнешемХранилище, ИмяКаталогаНаДиске = "", ИмяФайлаСРасширением = "") Экспорт
	
	Отказ = Ложь;
	СтруктураДанных = ПолучитьСтруктуруДанныхФалаИзВнешнегоХранилища(СсылкаНаФайлВоВнешемХранилище, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат "";
	КонецЕсли; 

	Если ПустаяСтрока(ИмяКаталогаНаДиске) Тогда
		ИмяКаталогаНаДиске = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
	КонецЕсли;
	
	КаталогНаДиске = Новый Файл(ИмяКаталогаНаДиске);
	Если Не КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ИмяКаталогаНаДиске);
	КонецЕсли;
	
	ДанныеФайла = СтруктураДанных.ДвоичныеДанные;
	
	Если ПустаяСтрока(ИмяФайлаСРасширением) Тогда
		
		ИмяФайлаВХранилище = 
			?(ЗначениеЗаполнено(СтруктураДанных.ПредставлениеДанных), СтруктураДанных.ПредставлениеДанных, "temp.tmp");
		ПолноеИмяФайла = ИмяКаталогаНаДиске + ИмяФайлаВХранилище;
		
	Иначе
		ПолноеИмяФайла = ИмяКаталогаНаДиске + ИмяФайлаСРасширением;
	КонецЕсли; 
		
	ДанныеФайла.Записать(ПолноеИмяФайла);
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

Функция ПолучитьДвоичныеДанныеИзВнешнегоХранилища(СсылкаНаФайлВоВнешемХранилище) Экспорт

	Отказ = Ложь;
	СтруктураДанных = ПолучитьСтруктуруДанныхФалаИзВнешнегоХранилища(СсылкаНаФайлВоВнешемХранилище, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	Возврат СтруктураДанных.ДвоичныеДанные;
		
КонецФункции

Функция ПолучитьДанныеФайлаИзВнешнегоХранилища(СсылкаНаФайлВоВнешемХранилище) Экспорт
	
	Отказ = Ложь;
	СтруктураДанных = ПолучитьСтруктуруДанныхФалаИзВнешнегоХранилища(СсылкаНаФайлВоВнешемХранилище, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Отказ Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	Возврат СтруктураДанных;
	
КонецФункции


Функция ПолучитьСтруктуруДанныхФалаИзВнешнегоХранилища(СсылкаНаФайлВоВнешемХранилище, Отказ)
	
	СсылкаНаЗаписьВТаблицеХранилища = СсылкаНаЗаписьВТаблицеХранилища(СсылкаНаФайлВоВнешемХранилище, Отказ);
	Если СсылкаНаЗаписьВТаблицеХранилища = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанных = МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
		.ПолучитьДанныеИзТаблицы(СсылкаНаЗаписьВТаблицеХранилища, Отказ);

	//РаспаковатьАрхивныеДанные

	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтруктураДанных;
	КонецЕсли; 
	
КонецФункции

Функция СсылкаНаЗаписьВТаблицеХранилища(СсылкаНаЗаписьВоВнешемХранилище, Отказ)
	
	ТипСсылкиНаЗапись = ТипЗнч(СсылкаНаЗаписьВоВнешемХранилище);
	Если ТипСсылкиНаЗапись = Тип("СправочникСсылка.ФайлыХранилищаДанных") Тогда
		
		ИмяТаблицыХраненияДанных = МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера
			.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(СсылкаНаЗаписьВоВнешемХранилище);
			
		СсылкаНаЗаписьВТаблицеХранилища = СсылкаНаЗаписьВоВнешемХранилище["Ссылка" + ИмяТаблицыХраненияДанных];
		
	ИначеЕсли Метаданные.ВнешниеИсточникиДанных.ФайловоеХранилище.Таблицы.Содержит(Метаданные.НайтиПоТипу(ТипСсылкиНаЗапись)) Тогда
		
		СсылкаНаЗаписьВТаблицеХранилища = СсылкаНаЗаписьВоВнешемХранилище;
		
	Иначе
		
		ОбщегоНазначения.СообщитьОбОшибке("В качестве ссылки на запись в хранилище данных передан не верный тип", 
			Отказ, "Внешнее хранилище данных");
			
		Возврат Неопределено;
		
	КонецЕсли; 
	
	Возврат СсылкаНаЗаписьВТаблицеХранилища;
	
КонецФункции

Процедура РаспаковатьАрхивныеДанные(ДвоичныеДанные, ИмяФайла, Отказ)
	
	Если Прав(ИмяФайла, 4) = ".zip" И СтрДлина(ИмяФайла) > 4 Тогда 
		
		Попытка
			
			ИмяКаталога = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
			СоздатьКаталог(ИмяКаталога);
			
			ДвоичныеДанные.Записать(ИмяКаталога + ИмяФайла);
			
			ZIP = Новый ЧтениеZipФайла(ИмяКаталога + ИмяФайла);
			Если ZIP.Комментарий = "архивация для сжатия данных" Тогда 
				ИмяФайла = ZIP.Элементы[0].Имя;
				ZIP.Извлечь(ZIP.Элементы[0], ИмяКаталога);
				ДвоичныеДанные = Новый ДвоичныеДанные(ИмяКаталога + ИмяФайла);
			КонецЕсли;
			ZIP.Закрыть();
			ZIP = Неопределено;
			
			МодульРаботыСФайламиХранилищаДанных.УдалитьВременныйФайл(ИмяКаталога + ИмяФайла);
			
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Неудачная попытка получения архивированных данных!" + Символы.ПС + ОписаниеОшибки(), Отказ, "Внешнее хранилище данных");
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// TODO
Процедура УдалитьДанныеИзВнешнегоХранилища()
	
КонецПроцедуры

Функция ПолучитьВерсиюДанных()
	Возврат Неопределено;
КонецФункции

