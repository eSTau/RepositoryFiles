
// Сохранить файл
Процедура ДействияФормыКнопкаСохранить(Кнопка)
	
	Если Не ПроверитьДанныеХранилища(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = ИмяФайла;
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Если МодульРаботыСФайламиХранилищаДанных.РезультатПолученияДанных(Ссылка, Диалог.ПолноеИмяФайла) Тогда 
		Возврат;
	Иначе 
		Предупреждение("Файл не записан! Проблемы получения данных.");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Открыть файл на просмотр
Процедура ДействияФормыКнопкаОткрыть(Кнопка)
	
	Если Не ПроверитьДанныеХранилища(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = ПолучитьИмяВременногоФайла("") + ПолучитьРазделительПути();
	СоздатьКаталог(ИмяКаталога);
	ПолноеИмяФайла = "";
	
	Если МодульРаботыСФайламиХранилищаДанных.РезультатПолученияДанных(Ссылка, ИмяКаталога, ПолноеИмяФайла) Тогда 
		КодВозврата = Неопределено;
		
		ЗапуститьПриложение("""" + ПолноеИмяФайла + """", , Истина, КодВозврата);
		
		Если КодВозврата <> Неопределено Тогда 
			МодульРаботыСФайламиХранилищаДанных.УдалитьВременныйФайл(ПолноеИмяФайла);
		КонецЕсли;
		
		Возврат;
	Иначе 
		Предупреждение("Файл не доступен! Проблемы получения данных.");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Изменить данные
Процедура ДействияФормыКнопкаИзменить(Кнопка)
	
	// Проверим, есть ли какие-нибудь данные
	Если ПроверитьДанныеХранилища(Ложь) Тогда
		Ответ = Вопрос("Заменить данные?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовим диалог выбора файла
	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Ложь);
	Диалог.ПредварительныйПросмотр = Ложь;
	
	// Откроем диалог выбора
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	// Запишем в хранилище выбранный файл
	Попытка
		ВыбранныйФайл = Новый Файл(Диалог.ПолноеИмяФайла);
		ИмяФайла = ВыбранныйФайл.Имя;
		НачатьТранзакцию();
		//--<Хорошев Андрей 22.06.2016 13:47:14 
		Заблокировать(); //Блокируем элемент открытой формой, теперь его никто изменить не может
		//Блокировка 				= Новый БлокировкаДанных;
		//ЭлементБлокировки 		= Блокировка.Добавить("Справочник.ФайлыХранилищаДанных");
		//ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//Блокировка.Заблокировать();
		Отказ=Ложь;
		ИмяТаблицы=МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(Тип);
		//▼ #РИ-007957 23.04.18-11:30 // Куранов Артем // ☯ ДОРАБОТКА
		Отказ = Ложь;
		СообщениеОбОшибке = КонтрольРазмераВложений(ИмяТаблицы, ВыбранныйФайл.Размер(), Отказ);
		Если Не Отказ Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);	
		КонецЕсли; 
		//▲ 23.04.2018-11:30 // Куранов Артем // ☯ ДОРАБОТКА                                       
		
		Рез=МодульРаботыСФайламиХранилищаДанных.ПоместитьДанныеФайла(Ссылка, Диалог.ПолноеИмяФайла, ИмяФайла, Отказ);
		Если МодульРаботыСФайламиХранилищаДанныхПовтИсп.ХранимТаблицуНаMySQL(ИмяТаблицы) Тогда
			ЭтотОбъект["Ссылка"+ИмяТаблицы]=Рез
		КонецЕсли;
		Если не Отказ Тогда 
			ЗаписатьВФорме();
			ЗафиксироватьТранзакцию();
		Иначе 
			ОтменитьТранзакцию();
			Предупреждение("Файл не записан! Проблемы помещения данных.");
			Возврат;
		КонецЕсли;
	Исключение
		Предупреждение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Сообщить версию файла
Процедура ДействияФормыКнопкаВерсия(Кнопка)
	
	Если Не ПроверитьДанныеХранилища(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Предупреждение(МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ВернутьВерсиюДанных(Ссылка), , "Версия данных"); 
	
КонецПроцедуры

// Проверить данные хранилища
//
// Параметры
//  Предупреждать  – Булево – Выводить или нет предупреждение о том, что хранилище пусто
//
// Возвращаемое значение:
//   Булево   – Истина, если хранилище не пусто, Ложь - иначе
//
Функция ПроверитьДанныеХранилища(Предупреждать)
	
	Если МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ЕстьДанные(Ссылка) Тогда 
	////Если Хранилище.Получить() <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Предупреждать Тогда
		Предупреждение("Хранилище пусто!");
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции // ПроверитьДанныеХранилища()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	////Отказ = ЭтоНовый() И (НЕ ЗначениеЗаполнено(Тип) ИЛИ НЕ ЗначениеЗаполнено(Объект));
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ТолькоПросмотр = НЕ ЭтоНовый();
	// доступ к заполнению
	Если НЕ ТолькоПросмотр Тогда 
		ЭлементыФормы.Тип.ТолькоПросмотр 	= ЗначениеЗаполнено(Тип);
		ЭлементыФормы.Объект.ТолькоПросмотр = ЗначениеЗаполнено(Объект);
		//Новый файл, предложим сразу выбрать
		ИмяФайлаНачалоВыбора(ЭлементыФормы.ИмяФайла, Ложь);
	КонецЕсли;
	// доступ к операциям чтения
	ЭлементыФормы.ДействияФормы.Кнопки.КнопкаОткрыть.Доступность 	= ТолькоПросмотр;
	ЭлементыФормы.ДействияФормы.Кнопки.КнопкаСохранить.Доступность 	= ТолькоПросмотр;
	ЭлементыФормы.ДействияФормы.Кнопки.КнопкаВерсия.Доступность 	= ТолькоПросмотр;
	// доступ к операции записи
	ЭлементыФормы.ДействияФормы.Кнопки.КнопкаИзменить.Доступность 	= ТолькоПросмотр И РольДоступна("ПолныеПрава");
	
	//--<Хорошев Андрей 24.06.2016 14:27:25 - выполняем подмену таблицы для mySQL
	ИмяТаблицы=МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(Тип);
	Если МодульРаботыСФайламиХранилищаДанныхПовтИсп.ХранимТаблицуНаMySQL(ИмяТаблицы) Тогда
		ЭлементыФормы.ДанныеФайла.Данные="Ссылка"+ИмяТаблицы;
		ЭлементыФормы.ДанныеФайла.КнопкаВыбора=Истина;
		ЭлементыФормы.ДанныеФайла.КнопкаОткрытия=Истина;
	Иначе
		ЭлементыФормы.ДанныеФайла.Видимость=Ложь;
		ЭлементыФормы.НадписьДанныеФайла.Видимость=Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)
	
	////Если Наименование <> ИмяФайла Тогда  
	////	Наименование = ИмяФайла;
	////КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)
	
	//▼ #РИ-007957 20.04.18-18:03 // Куранов Артем // ☯ ДОРАБОТКА                                   
	//Проверяем количество и размер прикрепленных файлов файлов
	//▼ #РИ-008860 04.09.18-09:12 // Куранов Артем // ☯ ДОРАБОТКА 
	//СообщениеОбОшибке = "";
	//Если МожноПрикреплятьФайл(Объект.Ссылка, СообщениеОбОшибке) Тогда
	//Иначе
	//	ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке, Отказ);
	//	Возврат;
	//КонецЕсли; 
	//▲ 20.04.2018-18:03 // Куранов Артем // ☯ ДОРАБОТКА
	//▲ 04.09.2018-09:12 // Куранов Артем // ☯ ДОРАБОТКА                                       
	
	
	ЭтоНовый = Ложь;
	Если ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый) Тогда 
		ЭтоНовый = ЭтоНовый = Истина;
	КонецЕсли;
	// первоначальное помещение данных во внешнее хранилище
	Если ЭтоНовый и ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		//▼ #РИ-007957 23.04.18-11:30 // Куранов Артем // ☯ ДОРАБОТКА
		ИмяТаблицы=МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(Тип);
		ВыбранныйФайл = Новый Файл(ПолноеИмяФайла);
		СообщениеОбОшибке = КонтрольРазмераВложений(ИмяТаблицы, ВыбранныйФайл.Размер(), Отказ);
		Если Отказ Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке, Отказ);
			Возврат;
		КонецЕсли; 
		//▲ 23.04.2018-11:30 // Куранов Артем // ☯ ДОРАБОТКА  
		Рез=МодульРаботыСФайламиХранилищаДанных.ПоместитьДанныеФайла(Ссылка, ПолноеИмяФайла, ИмяФайла, Отказ);
		Если МодульРаботыСФайламиХранилищаДанныхПовтИсп.ХранимТаблицуНаMySQL(ИмяТаблицы) Тогда
			ЭтотОбъект["Ссылка"+ИмяТаблицы]=Рез
		КонецЕсли;
		Если не Отказ Тогда
			ЗаписатьВФорме();
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

Процедура ИмяФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = "Выберите файл";
	Если ДиалогВыбора.Выбрать() Тогда 
		ПолноеИмяФайла = ДиалогВыбора.ПолноеИмяФайла;
		ИмяФайла = СтрЗаменить(ДиалогВыбора.ПолноеИмяФайла, ДиалогВыбора.Каталог, "");
		Наименование = ИмяФайла;
		
		//▼ #РИ-007957 23.04.18-11:30 // Куранов Артем // ☯ ДОРАБОТКА 
		ИмяТаблицы=МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(Тип);
		ВыбранныйФайл = Новый Файл(ПолноеИмяФайла);
		Отказ = Ложь;
		СообщениеОбОшибке = КонтрольРазмераВложений(ИмяТаблицы, ВыбранныйФайл.Размер(), Отказ);
		Если Не Отказ Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);	
		КонецЕсли;  
		//▲ 23.04.2018-11:30 // Куранов Артем // ☯ ДОРАБОТКА 
	КонецЕсли;
КонецПроцедуры

Процедура ДанныеФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ИмяТаблицы=МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(Тип);
	ОткрытьФорму("ВнешнийИсточникДанных.ФайловоеХранилище.Таблица."+ИмяТаблицы+".ФормаВыбора",,Элемент);
	
КонецПроцедуры

Процедура ДанныеФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ИмяТаблицы=МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(Тип);
	Если МодульРаботыСФайламиХранилищаДанныхПовтИсп.ХранимТаблицуНаMySQL(ИмяТаблицы) и не ЭтотОбъект["Ссылка"+ИмяТаблицы].Пустая() Тогда
		ОткрытьФорму("ВнешнийИсточникДанных.ФайловоеХранилище.Таблица."+ИмяТаблицы+".ФормаОбъекта", Новый Структура("Ключ", ЭтотОбъект["Ссылка"+ИмяТаблицы]));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеФайлаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ИмяФайла=СокрЛП(ВыбранноеЗначение);
	Наименование = ИмяФайла;
	ИмяТаблицы=МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(Тип);
	ЭтотОбъект["Ссылка"+ИмяТаблицы]=ВыбранноеЗначение;
КонецПроцедуры

#Область СЛУЖЕБНЫЕ

// Куранов Артем // ☯ ДОРАБОТКА 
Функция КонтрольРазмераВложений(ИмяТаблицы, РазмерФайла, Отказ = Ложь)
//▼ #РИ-007957 23.04.18-11:52 // Куранов Артем // ☯ ДОРАБОТКА 
	Если ИмяТаблицы = "Projects" Тогда
		РазмерФайлаКб = (РазмерФайла/1024);
		Если РазмерФайла > 5242880 Тогда  //5мб
			Отказ = Истина;
			Возврат ("Размер файла не должен превышать 5 Мб.");
		Иначе
			//Обновим размер в доп. свойствах
			НайденныеСтроки = Сведения.НайтиСтроки(Новый Структура("Параметр", "Размер"));
			Если НайденныеСтроки.Количество() > 0  Тогда
				НайденныеСтроки[0].Значение = РазмерФайлаКб;
				Возврат "";
			Иначе
				НС = Сведения.Добавить();
				НС.Параметр = "Размер";
				НС.Значение = РазмерФайлаКб;
				Возврат "";
			КонецЕсли; 				
		КонецЕсли; 			
	КонецЕсли; 
//▲ 23.04.2018-11:52 // Куранов Артем // ☯ ДОРАБОТКА       
	
КонецФункции // КонтрольРазмераВложений()

//▼ РИ-008550 | 18.06.18-16:56 | Юдин Константин // ☯ ДОРАБОТКА 
Функция МожноПрикреплятьФайл(ДокументСсылка, СообщениеОбОшибке)
//▼ #РИ-007957 20.04.18-18:04 // Куранов Артем // ☯ ДОРАБОТКА 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФайлыХранилищаДанных.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ФайлыХранилищаДанных КАК ФайлыХранилищаДанных
	               |ГДЕ
	               |	ФайлыХранилищаДанных.Ссылка.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыФайловХранилищаДанных.Projects)
	               |	И ФайлыХранилищаДанных.Объект = &Объект
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФайлыХранилищаДанных.Ссылка";
				   Запрос.УстановитьПараметр("Объект", ДокументСсылка);
				   
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат Истина;	
	КонецЕсли; 
	Если РезультатЗапроса.Количество() > 5 Тогда
		СообщениеОбОшибке = ("Количество Файлов одного объекта не должно превышать 5.");
		Возврат Ложь;		
	КонецЕсли; 
	Возврат Истина;
//▲ 20.04.2018-18:04 // Куранов Артем // ☯ ДОРАБОТКА                                       		
КонецФункции // МожноПрикреплятьФайл()

#КонецОбласти // СЛУЖЕБНЫЕ