
#Область Выбор_Файла

&НаКлиенте
Функция ПодключитьРасширение()
	#Если ВебКлиент Тогда
		ОО = Новый ОписаниеОповещения("РезультатПодключенияРасширения", ЭтотОбъект);
		НачатьПодключениеРасширенияРаботыСФайлами(ОО);
	#КонецЕсли
			 
КонецФункции // ПодключитьРасширениеРаботыСФайлами()

&НаКлиенте
Функция РезультатПодключенияРасширения(Подключено, ДопПараметры) Экспорт
	Если НЕ Подключено Тогда
		Сообщить("Не удалось подключить расширение работы с файлами.");
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;	
КонецФункции // РезультатПодключенияРасширения()

&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДопПараметры) Экспорт

	Если ВыбранныеФайлы.Количество() = 0 ИЛИ ВыбранныеФайлы = Неопределено  Тогда
		Возврат;		
	КонецЕсли;

	Наименование = ВыбранныеФайлы[0];
	Объект.Наименование = Наименование;
	
	//▼ #РИ-007957 23.04.18-11:30 // Куранов Артем // ☯ ДОРАБОТКА 
	ИмяТаблицы=МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ИмяТаблицыХраненияДанныхВоВнешнемХранилище(Объект.Тип);
	ВыбранныйФайл = Новый Файл(Наименование);
	ВыбранныйФайл.НачатьПолучениеРазмера(Новый ОписаниеОповещения("ПослеПолученияРазмераФайла", ЭтотОбъект, Новый Структура("ИмяТаблицы, ИмяФайла",  ИмяТаблицы, Наименование)));  
	//▲ 23.04.2018-11:30 // Куранов Артем // ☯ ДОРАБОТКА

КонецПроцедуры // ПослеВыбораФайла()

&НаКлиенте
Процедура ПослеПолученияРазмераФайла(Размер, ДопПараметры) Экспорт
	Отказ = Ложь;
	СообщениеОбОшибке = КонтрольРазмераВложений(допПараметры.ИмяТаблицы, Размер, Отказ);
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);
		Объект.ИмяФайла = "";
	Иначе
		Объект.ИмяФайла = допПараметры.ИмяФайла; 
	КонецЕсли;
КонецПроцедуры // ПослеПолученияРазмераФайла()

#КонецОбласти // Выбор_Файла

&НаСервере
// Куранов Артем // ☯ ДОРАБОТКА 
Функция КонтрольРазмераВложений(ИмяТаблицы, РазмерФайла, Отказ = Ложь)
//▼ #РИ-007957 23.04.18-11:52 // Куранов Артем // ☯ ДОРАБОТКА 
	Если ИмяТаблицы = "Projects" Тогда
		РазмерФайлаКб = (РазмерФайла/1024);
		Если РазмерФайла > 5242880 Тогда  //5мб
			Отказ = Истина;
			Возврат ("Размер файла не должен превышать 5 Мб.");
		Иначе
			//Обновим размер в доп. свойствах
			НайденныеСтроки = Объект.Сведения.НайтиСтроки(Новый Структура("Параметр", "Размер"));
			Если НайденныеСтроки.Количество() > 0  Тогда
				НайденныеСтроки[0].Значение = РазмерФайлаКб;
				Возврат "";
			Иначе
				НС = Объект.Сведения.Добавить();
				НС.Параметр = "Размер";
				НС.Значение = РазмерФайлаКб;
				Возврат "";
			КонецЕсли; 				
		КонецЕсли; 			
	КонецЕсли; 
//▲ 23.04.2018-11:52 // Куранов Артем // ☯ ДОРАБОТКА       
	
КонецФункции // КонтрольРазмераВложений()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ ЗначениеЗаполнено(Объект.ИмяФайла) Тогда
		Отказ = Истина;
		Сообщить("Не выбран файл.");
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДанные(Адрес, ИмяФайла)	
	ИмяТаблицы = "Projects";

	Данные = ПолучитьИзВременногоХранилища(Адрес);
	
	Если СтрДлина(ИмяФайла) > 128 Тогда 
		ИмяФайла = "~"+Прав(ИмяФайла, 127);
	КонецЕсли;
	
	Если Объект.Ссылка=Неопределено или Объект.Ссылка = Справочники.ФайлыХранилищаДанных.ПустаяСсылка() или МодульРаботыСФайламиХранилищаДанныхПовтИсп.ХранимТаблицуНаMySQL(ИмяТаблицы) Тогда
		ЭтоРабочееХранилище=МодульРаботыСФайламиХранилищаДанныхПовтИсп.ЭтоРабочееХранилищеДанныхMySQL();
	Иначе
		ЭтоРабочееХранилище=МодульРаботыСФайламиХранилищаДанныхПовтИсп.ЭтоРабочееХранилищеДанных();
	КонецЕсли;
	
	Если не МодульРаботыСФайламиХранилищаДанныхПовтИсп.ЭтоРабочаяБазаДанных() = ЭтоРабочееХранилище Тогда 
		СтрокаСообщения = "Попытка работы из "
			+ ?(МодульРаботыСФайламиХранилищаДанныхПовтИсп.ЭтоРабочаяБазаДанных(), "рабочей", "тестовой") + " бызы с "
			+ ?(ЭтоРабочееХранилище, "рабочим", "тестовым") + " хранилищем";
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , "Внешнее хранилище данных");
		ЗаписьЖурналаРегистрации("Внешнее хранилище данных.Обновление инфо данных", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ФайлыХранилищаДанных, Объект.Ссылка, СтрокаСообщения);
		
		Возврат Ложь;
	
	КонецЕсли; 
	
	//Если Метаданные.ВнешниеИсточникиДанных.ФайловоеХранилище.Таблицы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(Ссылка))) Тогда
	//	Если не МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ПроверитьПодключениеКMySQL() Тогда
	//		Отказ=Истина;
	//		Возврат Неопределено;
	//	КонецЕсли;
	//	СтрДанных=Base64Строка(Данные);
	//	Если Объект.Ссылка.Data=СтрДанных и Объект.Ссылка.Description=ИмяФайла Тогда
	//		//Ничего не меняем
	//		Возврат Ссылка;
	//	КонецЕсли; 
	//	ТекДанные=Объект;//Ссылка.ПолучитьОбъект();
	//	ТекДанные.Data=СтрДанных;
	//	ТекДанные.Description=ИмяФайла;
	//	ТекДанные.Записать();
	//	Возврат ТекДанные.Ссылка;
	//	
	//КонецЕсли;
	
	Если не МодульРаботыСФайламиХранилищаДанныхСерверВызовСервера.ВнешнееХранилищеФайловПодключено() Тогда
		Отказ=Истина;
		Возврат Неопределено;
	КонецЕсли; 
	Если Объект.Ссылка["Ссылка"+ИмяТаблицы].Пустая() или Найти(Строка(Объект.Ссылка["Ссылка"+ИмяТаблицы]),"<Объект не найден>")=1 Тогда
		ТекДанные = ВнешниеИсточникиДанных.ФайловоеХранилище.Таблицы[ИмяТаблицы].СоздатьОбъект();
	Иначе
		ТекДанные = Объект.Ссылка["Ссылка"+ИмяТаблицы].ПолучитьОбъект();
	КонецЕсли;
	
	ТекДанные.Data=Base64Строка(Данные);
	ТекДанные.Description=ИмяФайла;
	ТекДанные.Записать();
	Возврат ТекДанные.Ссылка;
	
КонецФункции // ПоместитьДанные()
 
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	#Если ВебКлиент Тогда 
		ПодключитьРасширение(); 				
	#КонецЕсли
	
	Адрес = "";
    ВыбранноеИмяФайла = "";
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ПослеПомещенияФайла", ЭтаФорма), Адрес, ВыбранноеИмяФайла, Истина, ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	Если Результат <> Неопределено ИЛИ Адрес = "" Тогда
        Файл = Новый Файл(ВыбранноеИмяФайла);
        ИмяФайла = Файл.Имя;
		Отказ = Ложь;
	Иначе
		Возврат;
    КонецЕсли;
    Объект.ИмяФайла = ИмяФайла;
	
	//помещаем в хранилище	
	ПрикрепленныйФайл = ПоместитьДанные(Адрес, ВыбранноеИмяФайла);
	
	Если ПрикрепленныйФайл <> Ложь Тогда
		Объект.СсылкаProjects = ПрикрепленныйФайл;
		Объект.Наименование = ИмяФайла;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПослеПомещенияФайла()




